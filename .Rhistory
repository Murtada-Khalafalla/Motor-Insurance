select(Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio=PE.Ratio.(TTM), Week.Range='52.Week.Range')
new_df <-  df %>%
select(Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio='PE.Ratio.(TTM)', Week.Range='52.Week.Range')
new_df
names(df)
new_df <-  df %>%
select(Name,Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio='PE.Ratio.(TTM)', Week.Range='52.Week.Range')
new_df
new_df <-  df %>%
select(Name,Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio='PE.Ratio.(TTM)', Week.Range='52.Week.Range') %>%
mutate(Change  =str_remove(Change ,'+'))
new_df <-  df %>%
select(Name,Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio='PE.Ratio.(TTM)', Week.Range='52.Week.Range') %>%
mutate(Change  =str_remove(Change ,[+]))
library(stringr)
new_df <-  df %>%
select(Name,Price='Price.(Intraday)', Change='%.Change',Avg_Vol='Avg.Vol.(3.month)',Market_Cap='Market.Cap',
PE_Ratio='PE.Ratio.(TTM)', Week.Range='52.Week.Range') %>%
mutate(Change  =str_remove(Change ,[+]))
mutate(Change  =str_remove(Change ,'+')
## some essentials from the tidyverse
library(ggplot2)   ## for plotting
library(dplyr)     ## for data manipulation
library(lubridate) ## for handling dates
nobel <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-14/nobel_winners.csv")
View(nobel)
plot_data <-
nobel %>%
mutate(prize_date = paste0(prize_year, "-12-10"),
age = time_length(interval(ymd(birth_date), ymd(prize_date)), "year")) %>%
group_by(prize_year, laureate_id) %>%
slice(1) %>%  ## make sure we have just one row per prizewinner per year
ungroup()
View(plot_data)
nobel <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-14/nobel_winners.csv")
plot_data <-
nobel %>%
mutate(prize_date = paste0(prize_year, "-12-10"),
age = round(time_length(interval(ymd(birth_date), ymd(prize_date)), "year")),0) %>%
group_by(prize_year, laureate_id) %>%
slice(1) %>%  ## make sure we have just one row per prizewinner per year
ungroup()
View(plot_data)
## some essentials from the tidyverse
library(ggplot2)   ## for plotting
library(dplyr)     ## for data manipulation
library(lubridate) ## for handling dates
nobel <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-14/nobel_winners.csv")
plot_data <-
nobel %>%
mutate(prize_date = paste0(prize_year, "-12-10"),
age = time_length(interval(ymd(birth_date), ymd(prize_date)), "year")) %>%
group_by(prize_year, laureate_id) %>%
slice(1) %>%  ## make sure we have just one row per prizewinner per year
ungroup()
View(plot_data)
main_plot <-
ggplot(plot_data, aes(group=category)) +
geom_point(aes(x=prize_year, y=age, colour=gender), alpha=0.6) +
facet_wrap(~category) +  ## plot each prize category separately
theme_bw() +
labs(y="Age of prize winner", x="Year of award") +
geom_smooth(aes(x=prize_year, y=age), method = "loess") + ## add a smoothed line
scale_y_continuous(limits=c(0,100)) +
scale_colour_discrete(breaks=c("Female","Male")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank())
main_plot
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
scale_x_discrete( drop=FALSE) +
scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
# scale_x_discrete( drop=FALSE) +
scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
scale_x_discrete( drop=FALSE) +
#scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
main_plot +
annotation_custom(grob=ggplotGrob(inset_plot),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
## This function allows us to specify which facet to annotate
annotation_custom2 <- function (grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, data)
{
layer(data = data, stat = StatIdentity, position = PositionIdentity,
geom = ggplot2:::GeomCustomAnn,
inherit.aes = TRUE, params = list(grob = grob,
xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax))
}
annotation_custom2
main_plot +
annotation_custom2(grob=ggplotGrob(inset_plot),
data = data.frame(category="Chemistry"),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
main_plot
library(purrr)
insets <- plot_data %>%
split(f = .$category) %>%
purrr::map(~annotation_custom2(
grob = ggplotGrob(get_inset(.) +
scale_y_continuous(limits=c(0,105), breaks = c(0, 50, 100))),
data = data.frame(category=unique(.$category)),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
)
main_plot + insets
main_plot +
insets +
geom_point(data = multiple_winners,
aes(x=prize_year, y=age), shape = 1, alpha=0.7) +
ggrepel::geom_text_repel(data = multiple_winners,
aes(label=gsub(",.*$","",full_name),
x=prize_year, y=age, group=full_name),
size=2, force=10, nudge_y = 45, segment.size=0.15)
multiple_winners <-
plot_data %>%
group_by(laureate_id) %>%
filter(length(laureate_id) > 1)
main_plot +
insets +
geom_point(data = multiple_winners,
aes(x=prize_year, y=age), shape = 1, alpha=0.7) +
ggrepel::geom_text_repel(data = multiple_winners,
aes(label=gsub(",.*$","",full_name),
x=prize_year, y=age, group=full_name),
size=2, force=10, nudge_y = 45, segment.size=0.15)
insets <- plot_data %>%
split(f = .$category) %>%
purrr::map(~annotation_custom2(
grob = ggplotGrob(get_inset(.) +
scale_y_continuous(limits=c(0,105), breaks = c(0, 50, 100))),
data = data.frame(category=unique(.$category)),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
)
insets
library(tidyverse)
library(ggplot2)
theme_set(theme_void())
firsts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-09/firsts.csv')
firsts %>%
count(category) %>%
arrange(desc(n))%>%
ggplot() +
aes(x= fct_reorder(category, n),
y= n,
fill= category)+
geom_col(color = "black")+
labs(x= "Categories",
y= "Number of Achievements",
fill = "Categories",
title = "Number of African American Achievements from 1738-2019") +
geom_text(aes(x =category,
y = n + 3,
label= n))+
scale_fill_viridis_d(option = 'viridis') -> ach
ach
# afrilearndata
remotes::install_github("afrimapr/afrilearndata")
library(afrilearndata)
library(afrihealthsites)
library(sf)
library(raster)
library(tidyverse)
library(ggthemes) # theme_map
library(paletteer)
library(showtext)
library(ggtext) #element_markdown
install.packages("sysfonts")
install.packages("showtextdb")
library(afrilearndata)
library(afrihealthsites)
library(sf)
library(raster)
library(tidyverse)
library(ggthemes) # theme_map
library(paletteer)
library(showtext)
library(ggtext) #element_markdown
install.packages("ggtext")
library(afrilearndata)
library(afrihealthsites)
library(sf)
library(raster)
library(tidyverse)
library(ggthemes) # theme_map
library(paletteer)
library(showtext)
library(ggtext) #element_markdown
install.packages("afrihealthsites")
library(afrilearndata)
library(afrihealthsites)
library(sf)
library(raster)
library(tidyverse)
library(ggthemes) # theme_map
library(paletteer)
library(showtext)
library(ggtext) #element_markdown
library(afrilearndata)
library(afrihealthsites)
library(sf)
library(raster)
library(tidyverse)
library(ggthemes) # theme_map
library(paletteer)
library(showtext)
library(ggtext) #element_markdown
# afrilearndata
remotes::install_github("afrimapr/afrilearndata")
# afrihealthsites`
remotes::install_github("afrimapr/afrihealthsites")
## some essentials from the tidyverse
library(ggplot2)   ## for plotting
library(dplyr)     ## for data manipulation
library(lubridate)
nobel <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-14/nobel_winners.csv")
interval(ymd(birth_date), ymd(prize_date)), "year")
interval(ymd(birth_date), ymd(prize_date))
View(nobel)
plot_data <-
nobel %>%
mutate(prize_date = paste0(prize_year, "-12-10"),
age = time_length(interval(ymd(birth_date), ymd(prize_date)), "year")) %>%
group_by(prize_year, laureate_id) %>%
slice(1) %>%  ## make sure we have just one row per prizewinner per year
ungroup()
View(plot_data)
age
main_plot <-
ggplot(plot_data, aes(group=category)) +
geom_point(aes(x=prize_year, y=age, colour=gender), alpha=0.6) +
facet_wrap(~category) +  ## plot each prize category separately
theme_bw() +
labs(y="Age of prize winner", x="Year of award") +
geom_smooth(aes(x=prize_year, y=age), method = "loess") + ## add a smoothed line
scale_y_continuous(limits=c(0,100)) +
scale_colour_discrete(breaks=c("Female","Male")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank())
main_plot
nobel
View(nobel)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
scale_x_discrete( drop=FALSE) +
scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
scale_x_discrete( drop=FALSE) +
scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
#scale_x_discrete( drop=FALSE) +
#scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
inset_plot <- get_inset(plot_data)
## A function to plot the inset
get_inset <- function(df){
p <- ggplot(data=df %>%
group_by(category, prize_year) %>%
slice(1),
aes(x=prize_share, fill=category)) +
geom_bar() +
scale_x_discrete( drop=FALSE) +
scale_fill_manual(values = c("#00BF7D", "#A3A500", "#F8766D","#00B0F6","#E76BF3","#636363")) +
guides(fill=FALSE) +
theme_bw(base_size=9) +  ## makes everything smaller
theme(panel.background = element_rect(fill="white"),  ## white plot background
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size=rel(0.7)), ## tiny axis text
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
return(p)
}
main_plot +
annotation_custom(grob=ggplotGrob(inset_plot),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
inset_plot <- get_inset(plot_data)
## This function allows us to specify which facet to annotate
annotation_custom2 <- function (grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, data)
{
layer(data = data, stat = StatIdentity, position = PositionIdentity,
geom = ggplot2:::GeomCustomAnn,
inherit.aes = TRUE, params = list(grob = grob,
xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax))
}
main_plot +
annotation_custom2(grob=ggplotGrob(inset_plot),
data = data.frame(category="Chemistry"),
ymin = -8, ymax=34, xmin=1955, xmax=2015)
View(plot_data)
names(plot_data)
bar_chart <- plot_data %>%
group_by(prize_year,category)
bar_chart
bar_chart <- plot_data %>%
count(prize_year,category)
bar_chart
bar_chart <- plot_data %>%
group_by(prize_year,category,age,gender)
bar_chart <- plot_data %>%
group_by(prize_year,category,age,gender)
bar_chart
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
group_by(prize_year,category,age,gender)
bar_chart
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
group_by(prize_year)
bar_chart
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
group_by(prize_year) %>%
ungroup()
bar_chart
ggage_Freq<- ggplot(bar_chart, aes(x=prize_year  , y=category , fill=gender))+
geom_bar (stat="identity",size=1, width = 1 , position = position_dodge(width = .1))+
geom_text(aes(label=category , hjust=0.5, vjust=1.5), color="white")+
labs(title = "Age - Frequency")+
theme_minimal()+
theme(legend.position = "nonw" )+
xlab("Age") + ylab("Annual Claim Frequency") + ylim(0,0.6)
ggage_Freq
ggage_Freq<- ggplot(bar_chart, aes(x=prize_year  , y=category , fill=category))+
geom_bar (stat="identity",size=1, width = 1 , position = position_dodge(width = .1))+
geom_text(aes(label=category , hjust=0.5, vjust=1.5), color="white")+
labs(title = "Age - Frequency")+
theme_minimal()+
theme(legend.position = "nonw" )+
xlab("Age") + ylab("Annual Claim Frequency") + ylim(0,0.6)
ggage_Freq
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
group_by(prize_year) %>%
ungroup()
bar_chart
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
mutate(prize_year = case_when(
prize_year='1901' ~ '1901',
prize_year='1902' ~ '1902',
prize_year='1903' ~ '1903'
)) %>%
group_by(prize_year) %>%
ungroup()
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
mutate(prize_year = case_when(
prize_year=='1901' ~ '1901',
prize_year=='1902' ~ '1902',
prize_year=='1903' ~ '1903'
)) %>%
group_by(prize_year) %>%
ungroup()
bar_chart
bar_chart <- plot_data %>%
select(prize_year,category,age,gender) %>%
filter(prize_year =='1901') %>%
group_by(prize_year) %>%
ungroup()
bar_chart
range(prize_year)
summary(prize_year)
summary(plot_data$prize_year)
plot_data
biomedicalrevenue %>%
filter(year %in% c(1901,1946,1975 ,1969,1997 ,2016 )) %>%
bar_chart(x = category, y = age, facet = prize_year)
library(ggcharts)
biomedicalrevenue %>%
filter(year %in% c(1901,1946,1975 ,1969,1997 ,2016 )) %>%
bar_chart(x = category, y = age, facet = prize_year)
View(plot_data)
View(plot_data)
sapply(nobel, function(x) sum(is.na(x)))
dim(nobel)
library(RCurl)
getDownloadSize = function (url)
{
h <- basicTextGatherer()
junk <- getURI(url, headerfunction = h$update, header = TRUE, nobody = TRUE)
h <- h$value()
##parseContentLength(h)
h
}
u = "http://cran.fhcrc.org/src/contrib/PACKAGES.gz"
# If we do 100 iterations, we fail on the 96th with an error
# about not being able to resolve cran.fchrc.org.
# This is on my linux box at home.  If we sleep for a second between
# each call, all is well. If we do just 90 even without sleeping, all is well.
# So looks like there is some maximum number of requests per time period on that
# DNS perhaps for the same machine.....
for (i in 1:90) {
print(i)
#   Sys.sleep(1)
jj = getDownloadSize(u)
}
